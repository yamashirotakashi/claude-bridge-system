# Claude Bridge System - Docker Compose Configuration
# Production-ready deployment with monitoring and persistence

version: '3.8'

services:
  # Main Bridge Service
  claude-bridge:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_VERSION: ${BUILD_VERSION:-latest}
        BUILD_TIMESTAMP: ${BUILD_TIMESTAMP}
        ENVIRONMENT: ${ENVIRONMENT:-production}
    container_name: claude-bridge-main
    restart: unless-stopped
    ports:
      - "${BRIDGE_PORT:-8080}:8080"      # HTTP API
      - "${BRIDGE_SECURE_PORT:-8443}:8443"  # HTTPS API
      - "${METRICS_PORT:-9090}:9090"     # Metrics endpoint
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - BRIDGE_CONFIG_PATH=/app/config/production.yaml
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - MONITORING_ENABLED=true
      - METRICS_PORT=9090
    volumes:
      - bridge_data:/app/data
      - bridge_logs:/app/logs
      - bridge_certs:/app/certs
      - ./config/production.yaml:/app/config/production.yaml:ro
      - ./config/logging.yaml:/app/config/logging.yaml:ro
    depends_on:
      - postgres
      - redis
    networks:
      - bridge_network
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: claude-bridge-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-claude_bridge}
      - POSTGRES_USER=${POSTGRES_USER:-claude}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - bridge_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-claude}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: claude-bridge-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - bridge_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: claude-bridge-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - claude-bridge
    networks:
      - bridge_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-bridge-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9091}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - bridge_network
    depends_on:
      - claude-bridge

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: claude-bridge-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - bridge_network
    depends_on:
      - prometheus

  # Log Aggregation with Fluentd
  fluentd:
    build:
      context: ./docker/fluentd
      dockerfile: Dockerfile
    container_name: claude-bridge-fluentd
    restart: unless-stopped
    volumes:
      - bridge_logs:/fluentd/log/bridge
      - nginx_logs:/fluentd/log/nginx
      - ./docker/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
    networks:
      - bridge_network
    depends_on:
      - claude-bridge

  # Health Check Service
  healthcheck:
    image: alpine:latest
    container_name: claude-bridge-healthcheck
    restart: unless-stopped
    command: |
      sh -c '
        apk add --no-cache curl &&
        while true; do
          echo "Running health checks..."
          curl -f http://claude-bridge:8080/health || echo "Bridge health check failed"
          curl -f http://nginx/health || echo "Nginx health check failed"
          sleep 300
        done
      '
    networks:
      - bridge_network
    depends_on:
      - claude-bridge
      - nginx

# Networks
networks:
  bridge_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Persistent Volumes
volumes:
  bridge_data:
    driver: local
  bridge_logs:
    driver: local
  bridge_certs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local