# Claude Bridge System - CI/CD Pipeline
# Comprehensive automation for testing, building, and deployment

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  PYTHON_VERSION: 3.11
  NODE_VERSION: 18
  REGISTRY: ghcr.io
  IMAGE_NAME: claude-bridge-system

jobs:
  # Code Quality and Security Checks
  quality-check:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run code quality checks
      run: |
        # Linting
        flake8 claude_bridge/ --max-line-length=100 --exclude=__pycache__
        
        # Type checking
        mypy claude_bridge/ --ignore-missing-imports
        
        # Security checks
        bandit -r claude_bridge/ -f json -o security-report.json || true
        
        # Import sorting
        isort --check-only claude_bridge/
        
        # Code formatting
        black --check claude_bridge/

    - name: Run vulnerability scanner
      run: |
        python -m claude_bridge.security.scanner --project-path . --format json --output security-scan.json

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          security-report.json
          security-scan.json

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: quality-check
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up test environment
      run: |
        export POSTGRES_URL="postgresql://test_user:test_password@localhost:5432/test_db"
        export REDIS_URL="redis://localhost:6379/0"
        export ENVIRONMENT="test"

    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=claude_bridge --cov-report=xml --cov-report=html

    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --timeout=60

    - name: Run end-to-end tests
      run: |
        python -m pytest tests/e2e/ -v --timeout=120

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: |
          htmlcov/
          pytest-report.html

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run performance benchmarks
      run: |
        python -m claude_bridge.performance.profiler --benchmark --output performance-report.json

    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: performance-report.json

  # Build Docker Images
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    if: github.event_name == 'push'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_VERSION=${{ github.ref_name }}
          BUILD_TIMESTAMP=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # Security Scan of Docker Image
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here
        # Example: kubectl, docker-compose, etc.

    - name: Run smoke tests
      run: |
        python scripts/smoke_tests.py --environment staging

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name == 'release'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment commands here

    - name: Run health checks
      run: |
        python scripts/health_check.py --environment production --timeout 300

    - name: Update monitoring dashboards
      run: |
        python scripts/update_dashboards.py --version ${{ github.ref_name }}

    - name: Notify successful deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          🚀 Claude Bridge System v${{ github.ref_name }} deployed successfully to production!
          
          📊 Deployment Summary:
          - Image: ${{ needs.build.outputs.image-tag }}
          - Commit: ${{ github.sha }}
          - Author: ${{ github.actor }}

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Clean up old images
      run: |
        # Clean up old container images (keep last 10)
        echo "Cleaning up old container images..."

    - name: Archive logs
      run: |
        # Archive deployment logs
        echo "Archiving deployment logs..."

# Workflow notifications
on_failure:
  name: Notify on Failure
  runs-on: ubuntu-latest
  needs: [quality-check, test, build, security-scan]
  if: failure()

  steps:
  - name: Notify failure
    uses: 8398a7/action-slack@v3
    with:
      status: failure
      channel: '#ci-cd'
      webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      text: |
        ❌ CI/CD Pipeline failed for Claude Bridge System
        
        Branch: ${{ github.ref_name }}
        Commit: ${{ github.sha }}
        Author: ${{ github.actor }}
        
        Please check the logs for details.